V 11
2
LANG:5 11 sgRootPanel
LANG:1 11 sgRootPanel
PANEL,-1 -1 1110 860 N "_3DFace" 4
"$ILS_A"
"$ILS_B"
"$Site"
"$SystemName"
"main()
{	
  init();																
}" 0
 E E E E 1 -1 -1 0  10 10
""0  1
E "
global string lastRequestedDirection;
global string ILSSelectionDpNamePrefix;

global string RunwayNameA;
global string RunwayNameB;
global string oppositeDirection;
global dyn_string ILSHistories;

global string LOCAoldStatus;
global string GPAoldStatus;
global string DMEAoldStatus;
global string LOCBoldStatus;
global string GPBoldStatus;
global string DMEBoldStatus;
global string SecundaryPSOldStatus;

void init()
{    
  setLabels();
  setBtnLabelNames();
  ILSSelectionDpNamePrefix = $SystemName + \"ILS\" + $ILS_A + \"_\" + $ILS_B + \"Selection\";
  initLastStatuses();
  getRunwayNames();
  getHistories();
		
  dpConnect(\"connectSelectedILS\", ILSSelectionDpNamePrefix + \".Commands.ILSSelection\");
	
  dpConnect(\"connectindividualILSSelectBtn\", ILSSelectionDpNamePrefix + \".Commands.ILSSelection\", ILSSelectionDpNamePrefix + \".Status.ILSButtonEnable\");
        
  if (isTWRClient()|| true)
  {
    dpConnect(\"connectStatusesForBuzzer\", ACTIVE_FW_OK, 
                  \"ILS\" + $ILS_A + \".HMIStatuses.LOC.Status\", 
                  \"ILS\" + $ILS_A + \".HMIStatuses.DME.Status\", 
                  \"ILS\" + $ILS_A + \".HMIStatuses.GP.Status\", 
                  \"ILS\" + $ILS_B + \".HMIStatuses.LOC.Status\", 
                  \"ILS\" + $ILS_B + \".HMIStatuses.DME.Status\", 
                  \"ILS\" + $ILS_B + \".HMIStatuses.GP.Status\", 
                  \"SecondaryPowerSupply.GlobalStatus.Status\",
                  ILSSelectionDpNamePrefix + \".Commands.ILSSelection\");
  }
}

void getRunwayNames()
{
  dpGet(ILSSelectionDpNamePrefix + \".General.RunwayNameA\", RunwayNameA, 
				ILSSelectionDpNamePrefix + \".General.RunwayNameB\", RunwayNameB);
}

void getHistories()
{
	dpGet(ILSSelectionDpNamePrefix + \".General.ILSHistories\", ILSHistories);
}

//return if current client is the TWR client (on System Navir... && is client No 1)
bool isTWRClient()
{
	string systemName;	
	int manNum;

	systemName = getSystemName();
	systemName = substr(systemName, 0, strpos(systemName, \"_\" ));
	
	manNum = myManNum();
	
	if (systemName == \"Navir\" && manNum == 1)
		return true;
	else
		return false;
}

void connectILSCmdButton(string dpButtonText, string buttonText, string dpButtonEnable, bool buttonEnable)
{
	if(buttonEnable && getIfAuthorizedCmdMachine())
	{
		ILSOtherDirectionButton.enabled = true;
		ILSOtherDirectionButton.toolTipText = \"ILS Selection commands\";
	}
	else 
	{
		ILSOtherDirectionButton.enabled = false;
		ILSOtherDirectionButton.toolTipText = \"No available ILS Selection commands for this client\";
	}

	if(oppositeDirection == \"B\")
		ILSOtherDirectionButton.text = buttonText + \" >>\";	
	else if(oppositeDirection == \"A\")
		ILSOtherDirectionButton.text = \"<< \" + buttonText;	
	else
		ILSOtherDirectionButton.text = buttonText;	
	
}

void connectSelectedILS(string selectedILSDpName, string selectedILS)
{
	if(selectedILS == $ILS_A)
	{
		ILSASelectedText.visible = true;
		ILSBSelectedText.visible = false;	
		oppositeDirection = \"B\";  // arrow to B
	}
	else if(selectedILS == $ILS_B)
	{
		ILSASelectedText.visible = false;
		ILSBSelectedText.visible = true;
		oppositeDirection = \"A\";  // arrow to A
	}
  else if(selectedILS == \"--\")
	{
		ILSASelectedText.visible = false;
		ILSBSelectedText.visible = false;
	}
}

void setLabels()
{
	setValue(\"PageLabel\", \"text\", \"ILS \" + $ILS_A + \" - \" +$ILS_B + \" \" + $Site);	
}

void setBtnLabelNames()
{
  SelectILSABtn.text = \"Select ILS \" + $ILS_A;
  SelectILSBBtn.text = \"Select ILS \" + $ILS_B;
  UnselectBothILSBtn.text = \"Unselect both ILS\";
}    

void enableILSSelectBtnA (bool enabled)
{
  SelectILSABtn.enabled = enabled;
}    

void enableILSSelectBtnB (bool enabled)
{
  SelectILSBBtn.enabled = enabled;
}    

void enableBothILSUnselectBtn (bool enabled)
{
  UnselectBothILSBtn.enabled = enabled;
}    


// return if the current HMI is an authorized machine to select ILS
bool getIfAuthorizedCmdMachine()
{
  string machineName;
	dyn_string authorizedCmdMachineList;
	
	dpGet(ILSSelectionDpNamePrefix + \".General.AuthorizedSelectCmdMachine\", authorizedCmdMachineList);
	
	machineName = strtolower(getHostname());
	
	// force to lower case
	for (int i = 1; i <= dynlen(authorizedCmdMachineList); i++)
	{
		authorizedCmdMachineList[i] = strtolower(authorizedCmdMachineList[i]);
	}
	
//	DebugN(\"getIfAuthorizedCmdMachine(): machineName: \" + machineName);
	if(dynContains(authorizedCmdMachineList, machineName) > 0)
	  return true;
	else 
          return false;
}	

void initLastStatuses()
{
	LOCAoldStatus = OPS_STATUS;
	GPAoldStatus = OPS_STATUS;
	DMEAoldStatus = OPS_STATUS;
	LOCBoldStatus = OPS_STATUS;
	GPBoldStatus = OPS_STATUS;
	DMEBoldStatus = OPS_STATUS;
	SecundaryPSOldStatus = OPS_STATUS;
}

bool ILScomponentMakeAlarm(string currentStatus, string lastSatus, bool isSelected)
{
	if(	isOPS(lastSatus) && isDEG(currentStatus) ||
			isOPS(lastSatus) && isUS(currentStatus) ||
			isOPS(lastSatus) && isWIP(currentStatus) ||
			isSBY(lastSatus) && isDEG(currentStatus) ||
			isSBY(lastSatus) && isUS(currentStatus) ||
			isDEG(lastSatus) && isUS(currentStatus) ||
			isDEG(lastSatus) && isWIP(currentStatus) && isSelected ||
			isWIP(lastSatus) && isUS(currentStatus) ||
			isWIP(lastSatus) && isDEG(currentStatus)
		)
		return true;
	else
		return false;
}

void connectStatusesForBuzzer(string FWOkDpName, bool FwOkStatus, string LOCDpName, string LOCAStatus, string DMEADpName, string DMEAStatus, string GPADpName, string GPAStatus,
												string LOCBDpName, string LOCBStatus, string DMEBDpName, string DMEBStatus, string GPBDpName, string GPBStatus,
												string SecondaryPSDpName, string SecondaryPSStatus, 
												string ILSSelectedDpName, string ILSSelected)
{	
	bool ILSAIsSelected;
	bool ILSBIsSelected; 
	
	if(ILSSelected == $ILS_A)
		ILSAIsSelected = true;
	else 
		ILSAIsSelected = false;
	
	if(ILSSelected == $ILS_B)
		ILSBIsSelected = true;
	else 
		ILSBIsSelected = false;
		
	if (!FwOkStatus ||
				ILScomponentMakeAlarm(LOCAStatus, LOCAoldStatus, ILSAIsSelected) ||
				ILScomponentMakeAlarm(GPAStatus, GPAoldStatus, ILSAIsSelected) ||
				ILScomponentMakeAlarm(DMEAStatus, DMEAoldStatus, ILSAIsSelected) ||	
				ILScomponentMakeAlarm(LOCBStatus, LOCBoldStatus, ILSBIsSelected) ||
				ILScomponentMakeAlarm(GPBStatus, GPBoldStatus, ILSBIsSelected) ||
				ILScomponentMakeAlarm(DMEBStatus, DMEBoldStatus, ILSBIsSelected) ||
				ILScomponentMakeAlarm(SecondaryPSStatus, SecundaryPSOldStatus, true) )
  {
    playAlarmSound();
  }
	
//	update last statuses
	LOCAoldStatus = LOCAStatus;
	GPAoldStatus = GPAStatus;
	DMEAoldStatus = DMEAStatus;
	LOCBoldStatus = LOCBStatus;
	GPBoldStatus = GPBStatus;
	DMEBoldStatus = DMEBStatus;
	SecundaryPSOldStatus = SecondaryPSStatus;
}

void playAlarmSound()
{
    startSound(PROJ_PATH + \"data\\\\sounds\\\\ding.wav\", true);
    delay(1, 600);
    stopSound();
}  

void connectindividualILSSelectBtn(string dpILSSelected, string ILSSelected, string dpButtonEnable, bool buttonEnable)
{
   
  if(!buttonEnable)
  {
    enableILSSelectBtnA(false);
    enableILSSelectBtnB(false);
    enableBothILSUnselectBtn(false);
     // ++ Stop Both ILS     
  }
  else {
    if(ILSSelected == \"--\") 
    {
      enableILSSelectBtnA(true);
      enableILSSelectBtnB(true);
      enableBothILSUnselectBtn(false);
    }
    else {
      if(ILSSelected == $ILS_A) 
      {
        enableILSSelectBtnA(false);
        enableILSSelectBtnB(true);
        enableBothILSUnselectBtn(true);
      }
      else { 
        if(ILSSelected == $ILS_B) 
        {
	  enableILSSelectBtnA(true);
          enableILSSelectBtnB(false);
          enableBothILSUnselectBtn(true);
        }
      }
    }
  }
}

void selectILS(string selectedRunway)
{
 	string confirmText;
	dyn_float df1;
	dyn_string ds1;
	
	confirmText = \"Do you really want to select ILS \"+ selectedRunway + \" ?\";
	
	ChildPanelOnCentralModalReturn(\"sgFw/sgFwConfirmWindow.pnl\", \"Confirmation\",
                                       makeDynString(\"$1:\" + confirmText, \"$2:Yes\", \"$3:No\"), df1, ds1); 

	if(ds1[1] == \"true\")
	{
		dpSet(ILSSelectionDpNamePrefix + \".Commands.ILSSelection\", selectedRunway);
		getHistories();
		sgHistoryAddEvent(ILSHistories, SEVERITY_COMMAND, \"ILS \" + selectedRunway + \" selection command sent by \" + getHostname());		
	}
}    

void unSelectBothILS()
{
 	string confirmText;
	dyn_float df1;
	dyn_string ds1;
	
	confirmText = \"Do you really want to unselect both ILS ?\";
	
	ChildPanelOnCentralModalReturn(\"sgFw/sgFwConfirmWindow.pnl\", \"Confirmation\", 
                                       makeDynString(\"$1:\" + confirmText, \"$2:Yes\", \"$3:No\"), df1, ds1); 

	if(ds1[1] == \"true\")
	{
		dpSet(ILSSelectionDpNamePrefix + \".Commands.ILSSelection\", \"--\");
		getHistories();
		sgHistoryAddEvent(ILSHistories, SEVERITY_COMMAND, \"ILS unselection command sent by \" + getHostname());		
	}
}    






" 0
 2
"CBRef" "1"
"EClose" E
""
NC
1
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:5 6 Layer1
13 649
"SelectILSBBtn"
""
1 765 130 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
201 0 0 0 0 0
E E E
0
1
LANG:5 0 

0
1
LANG:5 27 Tahoma,-1,24,5,69,0,0,0,0,0
0  763 128 1017 182

T 
1
LANG:5 13 Select ILS B

"main()
{
 selectILS($ILS_B);
}" 0
 E E E
2 629
"ILSBSelectedText"
""
1 730 220 E E E 1 E 1 E N "_WindowText" E N "grau" E E
 E E
174 0 0 0 0 0
E E E
0
1
LANG:5 0 

1
"dashclr"N "_Transparent"
E E 0 2 1 0 1 E U  1 E 732 222 1048 508
1 2 0 "0s" 0 0 0 65 0 0  732 222 1
1
LANG:5 27 Tahoma,-1,24,5,69,0,0,0,0,0
0 1
LANG:5 0 
2 625
"ILSASelectedText"
""
1 60 220 E E E 1 E 1 E N "_WindowText" E N "Grau" E E
 E E
173 0 0 0 0 0
E E E
0
1
LANG:5 0 

1
"dashclr"N "_Transparent"
E E 0 2 1 0 1 E U  1 E 62 222 378 508
1 2 0 "0s" 0 0 0 65 0 0  62 222 1
1
LANG:5 27 Tahoma,-1,24,5,69,0,0,0,0,0
0 1
LANG:5 0 
2 0
"PageLabel"
""
1 13 13 E E E 1 E 1 E N {0,0,0} E N {204,204,204} E E
 E E
1 0 0 0 0 0
E E E
0
2
LANG:5 0 
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 15 15 1101 51
1 2 0 "0s" 0 0 0 65 0 0  15 15 1
2
LANG:5 27 Tahoma,-1,29,5,69,0,0,0,0,0
LANG:1 107 -microsoft windows-Tahoma-bold-r-normal-*-*-260-100-100-*-*-iso8859-1|-29,0,0,0,700,0,0,0,0,3,2,1,34,Tahoma
0 2
LANG:5 22 ILS A - B OPS TWR View
LANG:1 4 AFPS
1 651 72 "" 46
0
1 652 73 "" 46
0
1 655 111 "" 46
0
1 656 112 "" 46
0
1 657 113 "" 46
0
1 658 119 "" 11
0
1 659 144 "" 46
0
13 648
"SelectILSABtn"
""
1 100 130 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
199 0 0 0 0 0
E E E
0
1
LANG:5 0 

0
1
LANG:5 27 Tahoma,-1,24,5,69,0,0,0,0,0
0  98 128 352 182

T 
1
LANG:5 13 Select ILS A

"main()
{
  selectILS($ILS_A);
}" 0
 E E E
13 650
"UnselectBothILSBtn"
""
1 430 130 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
203 0 0 0 0 0
E E E
0
1
LANG:5 0 

0
1
LANG:5 27 Tahoma,-1,24,5,69,0,0,0,0,0
0  428 128 682 182

T 
1
LANG:5 18 Unselect both ILS

"main()
{
  unSelectBothILS();
}" 0
 E E E
1 661 145 "" 1
0
1 660 145 "" 0
0
13 662
"TestSoundButton"
"TestSoundBtn"
1 896.4601769911501 820 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
211 0 0 0 0 0
E E E
0
1
LANG:5 40 If no sound, check screen sound settings

0
1
LANG:5 27 Tahoma,-1,16,5,69,0,0,0,0,0
0  898 818 1102 862

T 
1
LANG:5 16 Test sound level
"main()
{
  TestSoundButton.enabled = false;
  playAlarmSound();
  TestSoundButton.enabled = true;
}" 0
 E E E
0
LAYER, 1 
1
LANG:5 6 Layer2
1 653 102 "" 13
0
1 654 102 "" 14
0
0
LAYER, 2 
1
LANG:5 6 Layer3
0
LAYER, 3 
1
LANG:5 6 Layer4
0
LAYER, 4 
1
LANG:5 6 Layer5
0
LAYER, 5 
1
LANG:5 6 Layer6
0
LAYER, 6 
1
LANG:5 6 Layer7
0
LAYER, 7 
1
LANG:5 6 Layer8
0
3 72 "Group26" -1
"Navir\\objects\\NavirILSOPSBlock.pnl" 210 235 T 109 0.7 0 0.35 -67.2825433825431 157.800877192983
3
"$LabelsNum""1"
"$SystemName""$SystemName"
"$SystemStatus""\"ILS\" + $ILS_A+ \".HMIStatuses.LOC\""
3 73 "Group27" -1
"Navir\\objects\\NavirILSOPSBlock.pnl" 210 426 T 110 0.7 0 0.35 -67.4549080549079 180.800877192983
3
"$LabelsNum""1"
"$SystemName""$SystemName"
"$SystemStatus""\"ILS\" + $ILS_A+ \".HMIStatuses.DME\""
3 102 "" -1
"Navir\\ILS\\ILS_ICAO_Clock.pnl" 510 220 T 148 0.92452148790177 0 0.857142857142857 213.625135427952 200.571428571429
6
"$b_pvssRange""FALSE"
"$dpe_percentage1""$SystemName + \"ILS\" + $ILS_A + \"_\" + $ILS_B+ \"Selection.Status.ILSTimer\""
"$f_max""60"
"$f_min""0.000"
"$s_col1""sgStdOPSColor"
"$s_col2""sgStdABSColor"
3 111 "Group20" -1
"Navir\\objects\\NavirILSOPSBlock.pnl" 130 340 T 156 0.7 0 0.35 659.275861175861 301.300877192983
3
"$LabelsNum""1"
"$SystemName""$SystemName"
"$SystemStatus""\"ILS\" + $ILS_B \".HMIStatuses.GP\""
3 112 "Group21" -1
"Navir\\objects\\NavirILSOPSBlock.pnl" 130 110 T 157 0.7 0 0.35 658.717456617457 201.550877192983
3
"$LabelsNum""1"
"$SystemName""$SystemName"
"$SystemStatus""\"ILS\" + $ILS_B \".HMIStatuses.LOC\""
3 113 "Group22" -1
"Navir\\objects\\NavirILSOPSBlock.pnl" 130 210 T 158 0.7025 0 0.355 658.218467273467 255.704461152882
3
"$LabelsNum""1"
"$SystemName""$SystemName"
"$SystemStatus""\"ILS\" + $ILS_B \".HMIStatuses.DME\""
3 119 "" -1
"objects\\sgFwHistory.pnl" 450 730 T 171 1 0 1 -450 -70
2
"$SystemHistory""\"ILS\" + $ILS_A+ \"_\"$ILS_B+ Selection.History"
"$SystemName""$SystemName"
3 144 "PANEL_REF145" -1
"Navir\\objects\\NavirILSOPSBlock.pnl" 210 330 T 196 0.7 0 0.35 -66.72413882413871 304.5
3
"$LabelsNum""1"
"$SystemName""$SystemName"
"$SystemStatus""\"ILS\" + $ILS_A+ \".HMIStatuses.GP\""
3 145 "PANEL_REF123" -1
"Navir\\objects\\HeartBeatChecker.pnl" -5.0000000000004 430 T 210 1.04545454545455 0 0.888888888888889 979.9999999999996 237.7777777777778
1
"$SystemName""$SystemName"
0
