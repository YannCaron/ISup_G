V 11
2
LANG:5 11 sgRootPanel
LANG:1 11 sgRootPanel
PANEL,-1 -1 1110 860 N "_3DFace" 0
"main() {
  frame_initialized();
}
" 0
 E E E E 1 -1 -1 0  10 10
""0  1
E "private const string SYSTEM_NAME = \"SmartRadio\";

private const string QUERY_IDENT = \"ident\";
private const string ENABLED_BACKCOLOR = \"#ffffff\";
private const string DISABLED_BACKCOLOR = \"#eeeeee\";

private const string ENABLED_FORECOLOR = \"#000000\";
private const string DISABLED_FORECOLOR = \"#999999\";

private int RADIO_STATUS_DEFAULT = -1;

private dyn_string RADIO_TYPE_VALUES = makeDynString(\"0\", \"1\", \"2\");
private dyn_string RADIO_TYPE_TEXTS = makeDynString(\"-\", \"RX\", \"TX\");

private dyn_string RADIO_STATUS_VALUES = makeDynString(\"UKN\", \"OPS\", \"U_S\", \"DEG\");
private dyn_string RADIO_STATUS_STATUS = makeDynString(\"UKN\", \"OPS\", \"U/S\", \"DEG\");
private dyn_string RADIO_STATUS_COLOR = makeDynString(\"#66ccff\", \"#00cc66\", \"#ff3333\", \"#ffff66\");

private dyn_string RADIO_ACTIVE_VALUES = makeDynString(\"FALSE\", \"TRUE\");
private dyn_string RADIO_ACTIVE_TEXTS = makeDynString(\"Enabled\", \"Disabled\");

private const dyn_int COLUMN_WIDTH = makeDynInt(0, 120, 40, 90, 90, 70, 70, 50, 80, 60, 80);

private const int COLUMN_DP = 0;
private const int COLUMN_NAME = 1;
private const int COLUMN_IPADDRESS = 2;
private const int COLUMN_SERVICE = 3;
private const int COLUMN_FUNCTION = 4;
private const int COLUMN_FREQUENCY = 5;
private const int COLUMN_STATION = 6;
private const int COLUMN_TYPE = 7;
private const int COLUMN_RESPONSIBLE = 8;
private const int COLUMN_STATUS = 9;
private const int COLUMN_ACTIVATION = 10;
private const int COLUMN_COMMENT = 11;

private const string CONTEXT_ACTIVATION = \"Enabled / Disabled\";
private const string CONTEXT_COMMENT = \"Comment\";

void frame_initialized() {
  prepareTable();
  initData();
  connect();
  
  // update regularly static values
  while (true)
  {  
    delay(300);  // 5 minutes
    initData();
  }  
  
}

private void prepareTable() {
  RadioTable.setStyleSheetFile(getPath(STYLE_REL_PATH, \"DataGrid.qss\"));

  RadioTable.addReadonlyColumn(\"DP\");
  RadioTable.addReadonlyColumn(\"Name\");
  RadioTable.addReadonlyColumn(\"IP\");
  RadioTable.addReadonlyColumn(\"Service\");
  RadioTable.addReadonlyColumn(\"Function\");
  RadioTable.addReadonlyColumn(\"Freq.\");
  RadioTable.addReadonlyColumn(\"Location\");
  RadioTable.addAssociationColumn(\"Type\", RADIO_TYPE_TEXTS, RADIO_TYPE_VALUES);
  RadioTable.addReadonlyColumn(\"Respons.\");
  RadioTable.addColoredAssociationColumn(\"Status\", RADIO_STATUS_STATUS, RADIO_STATUS_VALUES, RADIO_STATUS_COLOR);
  RadioTable.addAssociationColumn(\"Activ.\", RADIO_ACTIVE_TEXTS, RADIO_ACTIVE_VALUES);
  RadioTable.addReadonlyColumn(\"Comment\");
  
  RadioTable.setKeyColumn(COLUMN_DP);
  RadioTable.setColumnHidden(COLUMN_DP, true);
  RadioTable.addContextualMenu(CONTEXT_ACTIVATION);
  RadioTable.addContextualMenu(CONTEXT_COMMENT);

 	for (int i = 0; i < dynlen(COLUMN_WIDTH); i++) {
    int width = COLUMN_WIDTH[i + 1];
    if (width >= 0) {
  	  RadioTable.setColumnWidth(i, width);
  	}        
  }
  loadSetting();
}

private const string QUERY_DATA = \"SELECT '_original.._value' FROM 'SmartRadio.Components.Radio*.Data'\";
private const string QUERY_STATUS = \"SELECT '_original.._value' FROM 'SmartRadio.Components.Radio*.Status.Status'\";
private const string QUERY_DISABLE = \"SELECT '_original.._value' FROM 'SmartRadio.Components.Radio*.Status.Disabled'\";
private const string QUERY_COMMENT = \"SELECT '_original.._value' FROM 'SmartRadio.Components.Radio*.Status.Comment'\";

private void connect() {

  dpQueryConnectSingle(\"connectSmartRadioStatus\", false, QUERY_IDENT + \"Status\", QUERY_STATUS, 0);
  dpQueryConnectSingle(\"connectSmartRadioDisabled\", false, QUERY_IDENT + \"Disabled\", QUERY_DISABLE, 0);
  dpQueryConnectSingle(\"connectSmartRadioComment\", false, QUERY_IDENT + \"Comment\", QUERY_COMMENT, 0);

}

private void disconnect() {
  
//  DebugTN(\"SmartRadioMainPanel.pnl; function disconnect called\");
  int res = dpQueryDisconnect(\"connectSmartRadioQuery\", QUERY_IDENT);
  RadioTable.clear();
}

private void setStatus(string dp, string value) {
  strreplace(dp, \".Status.Status\", \"\");

  int row = RadioTable.getRow(dp);
      
  if (row == -1) {
    DebugTN(\"sgSmartRadioMainPanel.pnl; RadioTable unknown row for dp [\" + dp + \"]\");
  } else {
    RadioTable.setValue(row, COLUMN_STATUS, value);
  }
}

private void setDisabled(string dp, string value) {
  strreplace(dp, \".Status.Disabled\", \"\");

  int row = RadioTable.getRow(dp);
      
  if (row == -1) {
    DebugTN(\"sgSmartRadioMainPanel.pnl; RadioTable unknown row for dp [\" + dp + \"]\");
  } else {

  	if (!(bool)value) {
	    RadioTable.setRowForegroundColor(row, ENABLED_FORECOLOR);
	    RadioTable.setRowBackgroundColor(row, ENABLED_BACKCOLOR);
	  } else {
	    RadioTable.setRowForegroundColor(row, DISABLED_FORECOLOR);
	    RadioTable.setRowBackgroundColor(row, DISABLED_BACKCOLOR);
	  }
    
//   DebugTN(\"SmartRadio.pnl; setDisabled;  value: \" + value);
   
   RadioTable.setValue(row, COLUMN_ACTIVATION, value );
  }
}

private void setComment(string dp, string value) {
  strreplace(dp, \".Status.Comment\", \"\");

  int row = RadioTable.getRow(dp);
      
  if (row == -1) {
    DebugTN(\"sgSmartRadioMainPanel.pnl; RadioTable unknown row for dp [\" + dp + \"]\");
  } else {
    RadioTable.setValue(row, COLUMN_COMMENT, value);
  }
}

public void initData() {
  dyn_dyn_anytype data;

  dpQuery(QUERY_DATA, data);
  for (int i = 2; i<=dynlen(data); i++) {
		string dp = data[i][1];
		string value = data[i][2];
    
    strreplace(dp, \".Data\", \"\");

    dyn_string values = strsplit(value, \";\");
    if (dynlen(values) >= COLUMN_RESPONSIBLE) {
      string name = dpGetDescription(dp + \".Status\"); //values[COLUMN_NAME];
      string ipAddress = values[COLUMN_IPADDRESS];      
      string service = values[COLUMN_SERVICE];
      string function = values[COLUMN_FUNCTION];
      string frequency = values[COLUMN_FREQUENCY];
      string station = values[COLUMN_STATION];
      string responsible = values[COLUMN_TYPE];  //!! Message order isn't the same as column in the table...
      string radioType= values[COLUMN_RESPONSIBLE]; //!! Message order isn't the same as column in the table...

      RadioTable.addRowValues(makeDynString(dp, name, ipAddress, service, function, frequency, station, radioType, responsible));
    } else {
      RadioTable.addRowValues(makeDynString(dp, \" - \", \" - \", \" - \", \" - \", \" - \", \" - \", \" - \", \" - \"));
    }
    
  }
  
  dpQuery(QUERY_STATUS, data);
  for (int i = 2; i<=dynlen(data); i++) {
    string dp = data[i][1];
    string value = data[i][2];
    setStatus(dp, value);    
  }
  
  dpQuery(QUERY_DISABLE, data);
  for (int i = 2; i<=dynlen(data); i++) {
    string dp = data[i][1];
    string value = data[i][2];
    setDisabled(dp, value);    
  }

  dpQuery(QUERY_COMMENT, data);
  for (int i = 2; i<=dynlen(data); i++) {
    string dp = data[i][1];
    string value = data[i][2];
    setComment(dp, value);    
  }  
}

private void connectSmartRadioStatus(string ident, dyn_dyn_anytype data) {
  string dp = data[2][1];
  string value = data[2][2];
  setStatus(dp, value);
}

private void connectSmartRadioDisabled(string ident, dyn_dyn_anytype data) {
  string dp = data[2][1];
  string value = data[2][2];
//  DebugTN(\"connectSmartRadioDisabled; Radio Disabled: \" + dp + \" = \" + value);
  setDisabled(dp, value);
}

private void connectSmartRadioComment(string ident, dyn_dyn_anytype data) {
  string dp = data[2][1];
  string value = data[2][2];
//  DebugTN(\"connectSmartRadioComment;Radio Comment: \" + dp + \" = \" + value);
  setComment(dp, value);
}

protected void onContextualMenuClicked(string name, int row, int column) {
  if (name == CONTEXT_ACTIVATION) toggleActivation(row);
  else if (name == CONTEXT_COMMENT) commentDialog(row);
}

private void toggleActivation(int row) {
  string dp = RadioTable.getValue(row, COLUMN_DP);
	bool disabled;
  string deactivationMessage;
  string params, message;
  string dpName = dp + \".Status\";
  string name = dpGetDescription(dpName);
  string clientName = getHostname();
  dyn_string df, ds;
  
	dpGet(dpName + DISABLED_POSTFIX, disabled,
        dpName+ PARAMS_POSTFIX, params,
        dpName+ MESSAGE_POSTFIX, message);
  
  if(disabled)
		deactivationMessage = \"enable\";
	else
		deactivationMessage = \"disable\";

	ChildPanelOnCentralModalReturn(\"sgFw/sgFwConfirmWindow.pnl\", \"Confirmation\", 
					makeDynString(\"$1:Do you really want to \" + deactivationMessage + \" the radio: \"+ \"\\n\" + name + \": \" + \"\\n\" + \"<<\" + message + \">> ?\", \"$2:Yes\", \"$3:No\"), df, ds);

	if(ds[1] == \"true\") {  // button ok
    bool disableResult = !disabled;
		dpSet(dpName + DISABLED_POSTFIX, disableResult);
		
   	if(disableResult)
			sgHistoryAddEvent(SYSTEM_NAME + \".History\", SEVERITY_DISABLE, name + \" \" + deactivationMessage + \"d by Client: \" + clientName, message);			
		else
			sgHistoryAddEvent(SYSTEM_NAME + \".History\", SEVERITY_ENABLE, name + \" \" + deactivationMessage + \"d by Client: \" + clientName, message);			  
	}
}

private void commentDialog(int row) {
  string dp = RadioTable.getValue(row, COLUMN_DP);
  string ip = dpGetDescription(dp + \".Status\");
  
	ChildPanelOnModal(\"objects\\\\sgFwCommentWindow.pnl\", \"Comment Panel\", 
                    makeDynString(\"$SystemStatus:\" + \".Status\", \"$SystemName:\" + dp), 100, 100);
    
}

protected void forceToUKN_onClicked() {

  ForceToUnknown(\"\", \"SmartRadio\");
//  delay(5);

//  initData(); //get Static values
  
}

protected void radioTable_onFilterChanged() {
  saveXMLSettings(SYSTEM_NAME, \"radioTable\", RadioTable.buildXmlSettings());
}

protected void radioTable_onSortChanged() {
  saveXMLSettings(SYSTEM_NAME, \"radioTable\", RadioTable.buildXmlSettings());
}

private void loadSetting() {
  RadioTable.applyXmlSettings(loadXMLSettings(SYSTEM_NAME, \"radioTable\"));
}




















" 0
 2
"CBRef" "1"
"EClose" E
""
NC
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:5 6 Layer1
2 0
"PageLabel"
""
1 8 8 E E E 1 E 1 E N {0,0,0} E N {204,204,204} E E
 E E
1 0 0 0 0 0
E E E
0
2
LANG:5 0 
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 10 10 1096 46
1 2 0 "0s" 0 0 0 65 0 0  10 10 1
2
LANG:5 27 Tahoma,-1,29,5,69,0,0,0,0,0
LANG:1 107 -microsoft windows-Tahoma-bold-r-normal-*-*-260-100-100-*-*-iso8859-1|-29,0,0,0,700,0,0,0,0,3,2,1,34,Tahoma
0 2
LANG:5 10 SMARTRADIO
LANG:1 4 AFPS
1 121 16 "" 46
0
30 95
"Frame1"
""
1 10 350 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
50 0 0 0 0 0
E E E
1
1
LANG:5 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E 1.000918273645546 0 2.489959839357431 -0.009182736455471741 -163.9959839357431 0 E 10 100 1100 350
1
LANG:5 27 Tahoma,-1,15,5,69,0,0,0,0,0
0 1
LANG:5 6 Radios
1 124 19 "" 11
0
29 101
"RadioTable"
""
1 15.00000000000025 104.9999999999998 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
58 0 0 0 0 0
E E E
0
1
LANG:5 0 

4
"sortingEnabled" "bool TRUE"
"sorting" "bool TRUE"
"columnResizeMode" "enum 0"
"selectionMode" "enum 1"
1
LANG:5 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  15 105 1090 660
12 DataGrid.ewo
3
0 "contextualMenuClicked" "(string name, int row, int column)"
"  onContextualMenuClicked(name, row, column);"
0 "filterChanged" "()"
"  radioTable_onFilterChanged();"
0 "sortChanged" "()"
"  radioTable_onSortChanged();"
E13 107
"PUSH_BUTTON1"
""
1 20 665 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
59 0 0 0 0 0
E E E
0
1
LANG:5 0 

0
1
LANG:5 27 Tahoma,14,-1,5,50,0,0,0,0,0
0  18 663 207 697

T 
1
LANG:5 12 Force to UKN
"main()
{
  forceToUKN_onClicked();
}" 0
 E E E
0
LAYER, 1 
1
LANG:5 6 Layer2
1 122 16 "" 51
0
1 123 16 "" 52
0
0
LAYER, 2 
1
LANG:5 6 Layer3
0
LAYER, 3 
1
LANG:5 6 Layer4
0
LAYER, 4 
1
LANG:5 6 Layer5
0
LAYER, 5 
1
LANG:5 6 Layer6
0
LAYER, 6 
1
LANG:5 6 Layer7
0
LAYER, 7 
1
LANG:5 6 Layer8
0
3 16 "Group3" -1
"objects\\sgFwBlock.pnl" 230 300 T 45 0.6 0 0.15 302 10
5
"$LabelsNum""0"
"$PanelName"""
"$PanelParams"""
"$SystemName"""
"$SystemStatus""SmartRadio.GlobalStatus"
3 19 "" -1
"objects\\sgFwHistory.pnl" 80 695 T 51 1 0 1 -80 5
2
"$SystemHistory""SmartRadio.History"
"$SystemName"""
0
