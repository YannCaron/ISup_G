V 11
2
LANG:5 8 (NoName)
LANG:1 8 (NoName)
PANEL,-1 -1 420 220 N "_3DFace" 5
"$LabelsNum"
"$PanelName"
"$PanelParams"
"$SystemName"
"$SystemStatus"
"main()
{
  int x,y;
  int w,h;
   
  getValue(\"DecorationStatus\",\"position\",x,y);
  getValue(\"DecorationStatus\",\"size\",w,h);
  
  //DebugTN(x,y);
  
  // if $LabelNum > 0 -> component Text + N Label
  // if $LabelNum < 0 -> only N Label without component Text
  
 // DebugTN
  
  if ( (int) $LabelsNum >= 0 )
  addSymbol(myModuleName(), myPanelName(),\"objects/componentText.pnl\", \"CT\" + x + y, 
              \"\",
              x+(w/2),y,0,1,1);

// 20071011 aj
// correction to show label for \"logic error\" or \"disconnected if there is space even if labelsnum is 0
// if there is space always add the first label (empty by default and hidden later if labelsnum <=0 and fw is ok and connected)
//  if ( (fabs($LabelsNum) > 0) && (h > 40) )
  if ( (h >= 40) )
  {
    addSymbol(myModuleName(), myPanelName(),\"objects/labelText.pnl\", \"LT1\" + x + y, 
              \"\",
              x+(w/2),y+25,0,1,1);
  }
    if ( (fabs($LabelsNum) > 1) && (h >= 60) )
    addSymbol(myModuleName(), myPanelName(),\"objects/labelText.pnl\", \"LT2\" + x + y, 
              \"\",
              x+(w/2),y+45,0,1,1);
  if ( (fabs($LabelsNum) > 2) && (h >= 80) )
    addSymbol(myModuleName(), myPanelName(),\"objects/labelText.pnl\", \"LT3\" + x + y, 
              \"\",
              x+(w/2),y+65,0,1,1);
  if ( (fabs($LabelsNum) > 3) && (h >= 100) )
    addSymbol(myModuleName(), myPanelName(),\"objects/labelText.pnl\", \"LT4\" + x + y, 
              \"\",
              x+(w/2),y+85,0,1,1);


  initSystemName();
	
  connectSystemDP();
}" 0
 E E E E 1 -1 -1 0  10 10
""0  1
E "
// Modifications Februar 2004 PWulliens
// - Controlled all dimension are 200 x 400
// - Changed Border2 name to ThickBorder
// - Changed Text1 to LabelsText
// - Changed Text2 to ComponentText
// - Added Hidden functionalities to hide this block with a param in the database ($SystemStatus + \".Hidden\")
// PW 06.12.2005 Corrected Comments, disabled log path and distributed checks
// PW Changed .ComponentText to .Description (to have the value when distributed system failed
// PW Deleted $LabelNum
// August 2006: Modification to avoid multiple dpGet.
//							General optimization
//							Added text to inform on disconnection or logic error		


string systemName;
string systemStatus;
string description;
bool isConnected;

bool wasHidden; // to know if it was hidden before disconnection

void updateBlock(string fwOkDpName, int fwOkValue,
					string statusDpName, string statusDpValue,
				 	string disablerDpName, bool isDisabled,
				 	string subDisablerDpName, bool isSubDisabled,
				 	string Label1Name, string Label1Value,
				 	string Label2Name, string Label2Value,
				 	string Label3Name, string Label3Value,				  
				 	string Label4Name, string Label4Value,
				 	string commentName, string commentValue,
				 	string hiddenName, bool componentHidden)
{
	//DebugTN(\"update\",systemName, systemStatus);

	if(!componentHidden)
	{
		wasHidden = false;
	
	// Write Component Text value

        //aj 07/2007 componenttext is added dynamically as refpanel
        int x,y,w,h;        
        getValue(\"DecorationStatus\",\"position\",x,y);
        getValue(\"DecorationStatus\",\"size\",w,h);
        
        if ( (int)$LabelsNum >= 0)
          setValue(\"CT\"  + x + y + \".ComponentText\",\"visible\",true);
        // replaces
        //ComponentText.visible = true;

        if ( (fabs($LabelsNum) > 0) && (h >  40) ) setValue(\"LT1\"  + x + y + \".LabelText\",\"visible\",true);
        if ( (fabs($LabelsNum) > 1) && (h >  60) ) setValue(\"LT2\"  + x + y + \".LabelText\",\"visible\",true);
        if ( (fabs($LabelsNum) > 2) && (h >  80) ) setValue(\"LT3\"  + x + y + \".LabelText\",\"visible\",true);
        if ( (fabs($LabelsNum) > 3) && (h > 100) ) setValue(\"LT4\"  + x + y + \".LabelText\",\"visible\",true);
		//LabelsText.visible = true;

        	DecorationStatus.visible = true;
        	CommentCorner.visible = true;
		Hatches.visible = true;
	
		if(fwOkValue == 0)
		{
                  // aj 07/2007 deleted
                  //DisconnectedLogicErrorText.visible = false;

                  // 20071011 aj
                  // correction to show label for \"logic error\" or \"disconnected if there is space even if labelsnum is 0
                  // h>40 has to be there, otherwise LT doesn't exist -> error message
                  if ( (fabs($LabelsNum) <= 0) && (h > 40)) setValue(\"LT1\"  + x + y + \".LabelText\",\"visible\",false);

                  	
		// Define background color and tooltip text according to status
			if(isOPS(statusDpValue)){
				setComponentsColor(\"sgStdOPSColor\", commentValue);
				updateToolTip(\"Operational\", isDisabled, isSubDisabled);
			}
			else if(isSBY(statusDpValue)){
				setComponentsColor(\"sgStdSBYColor\", commentValue);	
				updateToolTip(\"StandBy\", isDisabled, isSubDisabled);
			}
			else if(isSSB(statusDpValue)){
				setComponentsColor(\"sgStdSSBColor\", commentValue);	
				updateToolTip(\"SecondaryStandBy\", isDisabled, isSubDisabled);
			}
			else if(isWIP(statusDpValue)){
				setComponentsColor(\"sgStdWIPColor\", commentValue);	
				updateToolTip(\"Work in progress\", isDisabled, isSubDisabled);
			}
			else if(isTEC(statusDpValue)){
				setComponentsColor(\"sgStdTECColor\", commentValue);	
				updateToolTip(\"Technical presence\", isDisabled, isSubDisabled);
			}
			else if(isINI(statusDpValue)){
				setComponentsColor(\"sgStdINIColor\", commentValue);	
				updateToolTip(\"Initializing\", isDisabled, isSubDisabled);
			}
			else if(isDEG(statusDpValue)){
				setComponentsColor(\"sgStdDEGColor\", commentValue);	
				updateToolTip(\"Degraded\", isDisabled, isSubDisabled);
			}
			else if(isUS(statusDpValue)){
				setComponentsColor(\"sgStdU/SColor\", commentValue);	
				updateToolTip(\"Unserviceable\", isDisabled, isSubDisabled);
			}
			else if(isABS(statusDpValue)){
				setComponentsColor(\"sgStdABSColor\", commentValue);	
				updateToolTip(\"Absent\", isDisabled, isSubDisabled);
			}
			else if(isSTP(statusDpValue)){
				setComponentsColor(\"sgStdSTPColor\", commentValue);	
				updateToolTip(\"Stopped\", isDisabled, isSubDisabled);
			}
			else{
				setComponentsColor(\"sgStdUKNColor\", commentValue);	
				updateToolTip(\"Unknown\", isDisabled, isSubDisabled);
			}		
			updateLabels(Label1Value, Label2Value, Label3Value, Label4Value, $LabelsNum);
		}
		else  // case framework isn't ok
		{
                        // aj 07/2007 text object deleted
			//activeDisconnectedLogicErrorText(\"LOGIC ERROR\");
			updateToolTip(\"Logic (Framework) error on System: \" + systemName, false, false);
			updateLabels(\"LOGIC ERROR!\",\"\",\"\",\"\",1);
      
                        // 20071011 aj
                        // correction to show label for \"logic error\" or \"disconnected if there is space even if labelsnum is 0
                        if ( h > 40 ) setValue(\"LT1\"  + x + y + \".LabelText\",\"visible\",true);
	
			setComponentsColor(\"sgStdUKNColor\", commentValue);	
		}// test framework ok
	
	// disable / subdisabled management
	setHatches(isDisabled, isSubDisabled); // Enable/Disable option is available if FW failed too!
	}
	else  // case block hidden
	{
		wasHidden = true;
	
        //aj 07/2007 componenttext is added dynamically as refpanel
        int x,y,w,h;        
        getValue(\"DecorationStatus\",\"position\",x,y);
        getValue(\"DecorationStatus\",\"size\",w,h);
        
        if ((int)$LabelsNum >= 0)
          setValue(\"CT\"  + x + y + \".ComponentText\",\"visible\",false);
        // replaces
        //ComponentText.visible = false;

        if ( (fabs($LabelsNum) > 0) && (h >  40) ) setValue(\"LT1\"  + x + y + \".LabelText\",\"visible\",false);
        if ( (fabs($LabelsNum) > 1) && (h >  60) ) setValue(\"LT2\"  + x + y + \".LabelText\",\"visible\",false);
        if ( (fabs($LabelsNum) > 2) && (h >  80) ) setValue(\"LT3\"  + x + y + \".LabelText\",\"visible\",false);
        if ( (fabs($LabelsNum) > 3) && (h > 100) ) setValue(\"LT4\"  + x + y + \".LabelText\",\"visible\",false);
		//LabelsText.visible = false;

		DecorationStatus.visible = false;
		CommentCorner.visible = false;	
		Hatches.visible	= false;
	}// Hidden test
}


// labels management
void updateLabels(string label1, string label2, string label3, string label4, int labelsNum)
{

        //aj 07/2007 componenttext and labels are added dynamically as refpanel
        int x,y,w,h;        
        getValue(\"DecorationStatus\",\"position\",x,y);
        getValue(\"DecorationStatus\",\"size\",w,h);
  
  	switch( fabs(labelsNum) )
	{
	case \"0\" :
              //  if (h >  40) setValue(\"LT1\"  + x + y + \".LabelText\",\"text\",\"\");
		//LabelsText.text = \"\";
		break;

	case \"1\" :
                if (h >  40) setValue(\"LT1\"  + x + y + \".LabelText\",\"text\",label1);
		//LabelsText.text = \"\\n\" + label1;
		break;

	case \"2\" :
                if (h >  40) setValue(\"LT1\"  + x + y + \".LabelText\",\"text\",label1);
                if (h >  60) setValue(\"LT2\"  + x + y + \".LabelText\",\"text\",label2);
		//LabelsText.text = \"\\n\" + label1 + \"\\n\" + label2;
		break;

	case \"3\" :
                if (h >  40) setValue(\"LT1\"  + x + y + \".LabelText\",\"text\",label1);
                if (h >  60) setValue(\"LT2\"  + x + y + \".LabelText\",\"text\",label2);
                if (h >  80) setValue(\"LT3\"  + x + y + \".LabelText\",\"text\",label3);
		//LabelsText.text = \"\\n\" + label1 + \"\\n\" + label2 + \"\\n\" + label3;
		break;

	default :
                if (h >  40) setValue(\"LT1\"  + x + y + \".LabelText\",\"text\",label1);
                if (h >  60) setValue(\"LT2\"  + x + y + \".LabelText\",\"text\",label2);
                if (h >  80) setValue(\"LT3\"  + x + y + \".LabelText\",\"text\",label3);
                if (h > 100) setValue(\"LT4\"  + x + y + \".LabelText\",\"text\",label4);
		//LabelsText.text = \"\\n\" + label1 + \"\\n\" + label2 + \"\\n\" + label3 + \"\\n\" + label4;
	}// switch
}

void setComponentsColor(string statusColor, string commentText)
{
	DecorationStatus.backCol = statusColor;
	
	if(commentText == \"\")
		CommentCorner.backCol = statusColor;
	else
		CommentCorner.backCol = \"{0,0,0}\";
}


void setHatches(bool isDisabled, bool isSubDisabled)
{
	if(isDisabled)
	{
		Hatches.backCol = \"{0,0,0}\";
		setValue(\"Hatches\", \"fill\", \"[hatch,[cross,5,left]]\");
	}
	else if(isSubDisabled)
	{
		Hatches.backCol = \"{0,0,0}\";
		setValue(\"Hatches\", \"fill\", \"[hatch,[parallel,5,right]]\");
	}
	else
		Hatches.backCol = \"_Transparent\";
}

//  Add to ToolTip the deactivation info
void updateToolTip(string toolTipText, bool isDisabled, bool isSubDisabled)
{
	if(isDisabled)
	{
          //aj 07/2007 tooltip only on hatches
          Hatches.toolTipText = toolTipText + \", disabled\";
	}
	
	else if(isSubDisabled)
	{
          //aj 07/2007 tooltip only on hatches
          Hatches.toolTipText = toolTipText + \", one or more component disabled\";
	}
	else
	{
          //aj 07/2007 tooltip only on hatches
          Hatches.toolTipText = toolTipText;
	}
}

void testBorder()
{
	string PanelNameParam;
	
	PanelNameParam = $PanelName;
	
// If a panel name has been typed, the border ist thick  --> Click,  open a panel 		
	if(PanelNameParam != \"\")
	{
		setValue(\"DecorationStatus\", \"border\", \"[solid,oneColor,JoinRound,CapNotLast,3]\");
		setValue(\"CommentCorner\", \"border\", \"[solid,oneColor,JoinRound,CapNotLast,3]\");
	}
// if no panel name, the component is only a vision module (no action)

	else
	{
		setValue(\"DecorationStatus\", \"border\", \"[solid,oneColor,JoinRound,CapNotLast,1]\");
		setValue(\"CommentCorner\", \"border\", \"[solid,oneColor,JoinRound,CapNotLast,1]\");
	}	
}
	
void onClick()
{
	dyn_string ds; 
	
	if($PanelName == \"\")
		return;
		
	ds = strsplit($PanelParams, \";\");
	
	for(int cpt = 1; cpt <= dynlen(ds); cpt++)
	{
		ds[cpt] = \"$\" + ds[cpt];
	}
	sgFwSetNaviParams($PanelName, ds);
	
	sgFwNaviPanelOn();
}

void onRightClick()
{
	dyn_string ds, df;
  
	ChildPanelOnCentralModalReturn(\"sgFw/sgFwConfirmDisabled.pnl\", \"Disabled confirmation\", 
					makeDynString(\"$systemName:\" + systemName, \"$systemStatus:\" + systemStatus), df, ds);
  
  return;  
  
// On the right Click, we can disable the component
	bool disabled;
	string message;
	dyn_string ds;
	dyn_string df;
	string s;
	string s2;
	string status;
	string eventText;
	dyn_string histories;
	string params;
	bool historiesPresent;
	string clientName;
	
// Get the disabled/enabled	point and the event text
	dpGet(systemName + systemStatus + DISABLED_POSTFIX, disabled,
	      systemName + systemStatus + EVENT_TEXT_POSTFIX, eventText,
	      systemName + systemStatus + EVENT_HISTORIES_POSTFIX, histories,
				systemName + systemStatus + PARAMS_POSTFIX, params);

	if(eventText == \"\")
		eventText = description;

// message for confirmation window; if the point is disabled -> \"enable\" if the point is enabled -> \"disable\"
	if(disabled)
		message = \"enable\";
	else
		message = \"disable\";
	
	clientName = getHostname();

	// treat if configured with params
	// 2006.09.29 aj as soon as params are configured, histories are not considered at al
	// same functionality as framework!!
	//	if(dynlen(histories) < 1 && params != \"\")
	if(params != \"\")
		dpGet(systemName + params + \".Histories\", histories);
	
	if(dynlen(histories) >= 1)
	{
		for(int i = 1; i <= dynlen(histories); i++)
		{
			histories[i] = systemName + histories[i];
		}
		historiesPresent = true;
	}
	else // case where no histories
		historiesPresent = false;

	ChildPanelOnCentralModalReturn(\"sgFw/sgFwConfirmWindow.pnl\", \"Confirmation\", 
					makeDynString(\"$1:Do you really want to \" + message + \" the point: \"+ \"\\n\" + \"<<\" + eventText + \">> ?\", \"$2:Yes\", \"$3:No\"), df, ds);
		
	if(ds[1] == \"true\")  // button ok
	{
		dpSet(systemName + systemStatus + DISABLED_POSTFIX, !disabled);
		if(!disabled)
		{
			s = systemName + systemStatus + ALARM_ACTIVE_POSTFIX;
			dpSet(s, false);
		}
		// reset / recreate alarms by reading and rewriting status
		s = systemName + systemStatus + STATUS_POSTFIX;
		
		dpGet(s, status);
		
		if(historiesPresent) // save in his histories queue
		{
			if(disabled)
				sgHistoryAddEvent(histories, SEVERITY_ENABLE, eventText + \" \" + message + \"d by Client: \" + clientName);			
			else
				sgHistoryAddEvent(histories, SEVERITY_DISABLE, eventText + \" \" + message + \"d by Client: \" + clientName);			
		}
		else // no histories configured, saved in system history
		{
			sgHistoryAddEvent(systemName + SYSTEM_HISTORY, SEVERITY_SYSTEM, \"Client: \" + clientName + \" \" + message + \"d \" + eventText + 
											\" (\" + systemName + systemStatus + \")\");			
		}
	}
}

void connectSystemDP()
{
	// if not yet connected, don't show dev CompText - can be wrong

        //aj 07/2007 componenttext is added dynamically as refpanel
        int x,y;        
        getValue(\"DecorationStatus\",\"position\",x,y);
        
        if ( (int)$LabelsNum >= 0)
          setValue(\"CT\"  + x + y + \".ComponentText\",\"text\",\"\");
        // replaces
	//ComponentText.text = \"\";
	
	// look if a panel is called to change the border
	testBorder();

	// use _DistManager because _DistConnections is updated when the connection is established
	// _DistManager calls the workfunction after the DPID is exchanged
	// before getSystemId still returns -1 !!
	// _DistManager only contains positive numbers and shows \"connected\" when the connection to the
	// active server is lost but the passive server is still ok (exactly what is needed here)
	dpConnect(\"checkSystemConnection\", 	\"_Connections.Dist.ManNums\", \"_Connections_2.Dist.ManNums\",
																			\"_DistManager.State.SystemNums\",\"_DistManager_2.State.SystemNums\",
																			ACTIVE_CHAIN);
}

void checkSystemConnection(	string connDpNameA, dyn_string manNumsA, string connDpNameB, dyn_string manNumsB,
														string distManDpA, dyn_string distManNumsA, string distManDpB, dyn_string distManNumsB,
														string activeChainDp, string activeChain)
{

//	DebugTN(\"CB\",systemName, systemStatus);

	int systemId;
	systemId = getSystemId(systemName);
//	if (systemId == -1)
//		DebugTN(systemName,systemId);
	
	string uiSystemName;
	uiSystemName = getSystemName();

//  no negative numbers in _DistManager therefore not needed
//	if (( ( (activeChain == \"A\") && (dynlen(manNumsA) > 0) && (dynContains(distManNumsA,systemId) || dynContains(distManNumsA, (0 - systemId))) ) 
//		|| ( (activeChain == \"B\") && (dynlen(manNumsB) > 0) && (dynContains(distManNumsB,systemId) || dynContains(distManNumsB, (0 - systemId))) ) 
//		|| (systemName == uiSystemName)	) && (systemId >= 1))

		// update description when connected again - in case it changed
	description = dpGetDescription(systemName + systemStatus);
        
        //aj 07/2007 componenttext is added dynamically as refpanel
        int x,y,w,h;        
        getValue(\"DecorationStatus\",\"position\",x,y);
        getValue(\"DecorationStatus\",\"size\",w,h);

        
        if ( (int)$LabelsNum >= 0)
          setValue(\"CT\"  + x + y + \".ComponentText\",\"text\",description);
        


	if ( ( ((activeChain == \"A\") && (dynlen(manNumsA) > 0) && (dynContains(distManNumsA,systemId))) 
		|| ((activeChain == \"B\") && (dynlen(manNumsB) > 0) && (dynContains(distManNumsB,systemId))) 
		|| (systemName == uiSystemName)	) && (systemId >= 1) )
	{	

//		DebugTN(\"connected\",systemName, systemStatus, isConnected);

                // 20071011 aj
                // correction to show label for \"logic error\" or \"disconnected if there is space even if labelsnum is 0
                // h>40 has to be there, otherwise LT doesn't exist -> error message
                if ( (fabs($LabelsNum) <= 0) && (h > 40)) setValue(\"LT1\"  + x + y + \".LabelText\",\"visible\",false);

		if(!isConnected)
		{
			dpConnect(\"updateBlock\", true,
									systemName + ACTIVE_FW_OK + \":_alert_hdl.._act_prior\",
								  systemName + systemStatus + STATUS_POSTFIX,
							 	  systemName + systemStatus + DISABLED_POSTFIX,
							 	  systemName + systemStatus + SUB_DISABLED_POSTFIX,
								  systemName + systemStatus + LABEL1_POSTFIX,
								  systemName + systemStatus + LABEL2_POSTFIX,
								  systemName + systemStatus + LABEL3_POSTFIX,
								  systemName + systemStatus + LABEL4_POSTFIX,
								  systemName + systemStatus + COMMENT_POSTFIX,
								  systemName + systemStatus + HIDDEN_POSTFIX);		  
	
			isConnected = TRUE;
		}
	}
	else
	{
//		DebugTN(\"DIS\",systemName, systemStatus, isConnected);
//		if (isConnected == false)
//			DebugTN(activeChain, systemId, manNumsA, distManNumsA);

                // aj 07/2007 text object deleted
		//activeDisconnectedLogicErrorText(\"DISCONNECTED\");
		updateToolTip(\"Connection between \" + getSystemName() + \" and \" + systemName + \" failed\", false, false);
		updateLabels(\"DISCONNECTED\",\"\",\"\",\"\",1);

                // 20071011 aj
                // correction to show label for \"logic error\" or \"disconnected if there is space even if labelsnum is 0
                if ( h > 40 ) setValue(\"LT1\"  + x + y + \".LabelText\",\"visible\",true);

			
		// like disabled as there can't be an alarm
		setHatches(1,0);
	
		setComponentsColor(\"sgStdUKNColor\", \"\");	
	}
}

void activeDisconnectedLogicErrorText(string text)
{
	if(!wasHidden)
	{
		DisconnectedLogicErrorText.visible = false;
		//DisconnectedLogicErrorText.visible = true;  // not used -> disabled
		DisconnectedLogicErrorText.text = systemName + \" \" + text;
	}
	else
		DisconnectedLogicErrorText.visible = false;
	
}

// Check if $SystemName is given. If not, strip to have system name from the $SystemStatus
void initSystemName()
{					
	if($SystemName != \"\")
	{
		systemName = $SystemName;
		// 07.03.2006 aj added variable systemStatus, otherwise systemName is doubled if it is given in the $SystemStatus		
		systemStatus = $SystemStatus;
	}
	else
	{
		systemName = substr($SystemStatus, 0, strpos($SystemStatus, \":\") + 1);		
		// 07.03.2006 aj added variable systemStatus, otherwise systemName is doubled if it is given in the $SystemStatus		
		systemStatus =   substr($SystemStatus, strpos($SystemStatus, \":\") + 1);		
		//DebugTN(systemStatus,$SystemStatus);
	}
	// if empty, get local systemName
	if(systemName == \"\")
	{
		systemName = getSystemName();
	}
}


" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:5 6 Layer1
10 46
"DecorationStatus"
""
1 10 10 E E E 1 E 1 E N "_WindowText" E N "sgStdUKNColor" E E
 E E
36 0 0 0 0 0
E E E
0
1
LANG:5 0 

1
"dashclr"N "_Transparent"
E E 0 1 3 0 1 E U  1 E 4 10 10
10 210
410 210
410 10
 1
0
LAYER, 1 
1
LANG:5 6 Layer2
6 51
"Hatches"
""
1 10 210 E E E 1 E 1 E N "_Transparent" E N {0,0,0} E E
 "main()
{
	onRightClick();
}" 0
 E
40 0 0 0 0 0
E E E
0
1
LANG:5 0 

1
"dashclr"N "_Transparent"
"main()
{

}" 0
 "main()
{
	onClick();
}" 0
 0 1 1 0 1 E U  3 1 8 1 E 10 10 410 210
10 52
"CommentCorner"
""
1 410 160 E E E 1 E 1 E N {0,0,0} E N {0,0,0} E E
 E E
41 0 0 0 0 0
E E E
0
1
LANG:5 0 

1
"dashclr"N "_Transparent"
E "main()
{
//	DebugTN(\"CommentCorner on click\");
	ChildPanelOnModal(\"objects\\\\sgFwCommentWindow.pnl\", \"Comment Panel\", 
										makeDynString(\"$SystemStatus:\" + systemStatus, \"$SystemName:\" + systemName), 100, 100);
}
" 0
 0 1 1 0 1 E U  1 E 3 410 160
360 210
410 210
 1
0
LAYER, 2 
1
LANG:5 6 Layer3
0
LAYER, 3 
1
LANG:5 6 Layer4
0
LAYER, 4 
1
LANG:5 6 Layer5
0
LAYER, 5 
1
LANG:5 6 Layer6
0
LAYER, 6 
1
LANG:5 6 Layer7
0
LAYER, 7 
1
LANG:5 6 Layer8
0
0
